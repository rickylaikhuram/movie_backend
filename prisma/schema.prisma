generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  name       String
  email      String      @unique
  password   String
  salt       String
  profileUrl String
  isAdmin    Boolean     @default(false)
  createdAt  DateTime    @default(now())
  watchList  WatchList[]
  review     Review[]
}

model Movies {
  id          String   @id @default(uuid())
  tmdbId      Int? // optional, only if fetched from TMDB
  title       String
  synopsis    String
  genres      String[] // multiple genres
  releaseYear String?
  runtime     Int?
  language    String?
  country     String?

  director String?
  cast     String[]

  posterUrl   String?
  backdropUrl String? // optional background
  trailerUrl  String? // YouTube or uploaded link

  averageRating Float? // numeric rating

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews   Review[]
  watchList WatchList[]
}

model WatchList {
  id       String   @id @default(uuid())
  userId   String
  moviesId String
  addedAt  DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  movies Movies @relation(fields: [moviesId], references: [id], onDelete: Cascade)

  @@unique([userId, moviesId])
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  moviesId   String
  rating     RATING   @default(ZERO)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reviewText String

  // Relations
  user   User?   @relation(fields: [userId], references: [id])
  Movies Movies? @relation(fields: [moviesId], references: [id])

  @@index([userId])
  @@index([moviesId])
}

enum RATING {
  ZERO
  ONE
  TWO
  THREE
  FOUR
  FIVE
}
